#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'systemu'
require 'stomp'
require 'logger'
require 'optparse'
require 'socket'
require 'fileutils'
require 'etc'


options = {}
version = "3.14"
pidfile = '/var/run/stomp-git.pid'

class UserLoginException<Exception;end;
class MissingRepoException<Exception;end;
class NotOurRepoException<Exception;end;

class EventLogger
  def on_publish(params, message, headers)
    $log.debug("Published #{headers} to #{stomp_url(params)}")
  rescue
  end

  def on_connecting(params=nil)
    $log.info("TCP Connection attempt %d to %s" % [params[:cur_conattempts], stomp_url(params)])
  rescue
  end

  def on_connected(params=nil)
    $log.info("Connected to #{stomp_url(params)}")
  rescue
  end

  def on_disconnect(params=nil)
    $log.info("Disconnected from #{stomp_url(params)}")
  rescue
  end

  def on_connectfail(params=nil)
    $log.info("TCP Connection to #{stomp_url(params)} failed on attempt #{params[:cur_conattempts]}")
  rescue
  end

  def on_miscerr(params, errstr)
    $log.error("Unexpected error on connection #{stomp_url(params)}: #{errstr}")
  rescue
  end

  def on_ssl_connecting(params)
    $log.info("Estblishing SSL session with #{stomp_url(params)}")
  rescue
  end

  def on_ssl_connected(params)
    $log.info("SSL session established with #{stomp_url(params)}")
  rescue
  end

  def on_ssl_connectfail(params)
    $log.error("SSL session creation with #{stomp_url(params)} failed: #{params[:ssl_exception]}")
  end

  # Stomp 1.1+ - heart beat read (receive) failed.
  def on_hbread_fail(params, ticker_data)
    $log.error("Heartbeat read failed from '%s': %s" % [stomp_url(params), ticker_data.inspect])
  rescue Exception => e
  end

  # Stomp 1.1+ - heart beat send (transmit) failed.
  def on_hbwrite_fail(params, ticker_data)
    $log.error("Heartbeat write failed from '%s': %s" % [stomp_url(params), ticker_data.inspect])
  rescue Exception => e
  end

  # Log heart beat fires
  def on_hbfire(params, srind, curt)
    case srind
      when "receive_fire"
        $log.debug("Received heartbeat from %s: %s, %s" % [stomp_url(params), srind, curt])
      when "send_fire"
        $log.debug("Publishing heartbeat to %s: %s, %s" % [stomp_url(params), srind, curt])
    end
  rescue Exception => e
  end

  def stomp_url(params)
    "%s://%s@%s:%d" % [ params[:cur_ssl] ? "stomp+ssl" : "stomp", params[:cur_login], params[:cur_host], params[:cur_port]]
  end
end

# stdout and stderr require an io handle to write to... this makes Logger one :)
class Logwrite
  def initialize(logger, type)
    @log = logger
    @type = type
  end

  def write(message)
    if @type == "stderr"
      @log.error(message)
    elsif @type == "stdout"
      @log.info(message)
    end
    return message.to_s.bytesize
  end

  # Dummy method to keep what passes for the standard i/o library happy.
  def flush
    #
  end

  alias puts write
  alias print write
  alias p write
end

class Parsemessage
  attr_reader :repo
  attr_reader :subj
  attr_reader :branch
  attr_reader :commit_id

  def initialize(stompmsg)
    @branch = ''
    @commit_id = ''
    @repo = ''

    @subj = stompmsg.headers["subject"]

    s1,s2,s3 = stompmsg.headers["subject"].split(' ',3)
    if s2 =~ /refs\/heads\//
      @branch = s2.sub('refs/heads/','')
      @commit_id = s3
    end

    stompmsg.body.lines do |mline|
      mkey,mval = mline.split(":",2)
      @repo = mval.strip if mkey == "repo"
    end
  end
end

def check_valid_user(user)
  guserinfo = Etc.getpwnam(user)
  if File.readlines('/etc/shells').grep(/#{guserinfo.shell}/).size == 0
    raise UserLoginException, "#{user} has no login shell."
  end
end

def check_valid_repo(msg_repo,conf_repos)
  raise NotOurRepoException, "Not our repo: #{msg_repo}" if !conf_repos[msg_repo]
  raise MissingRepoException, "Repo #{msg_repo} in config but not in filesystem." if !File.exists?(conf_repos[msg_repo]['repo'])
end

def gitfetch(mess,rdir,user)
  commandline = "/bin/su - #{user} -c \"cd #{rdir} && /usr/bin/git fetch && /usr/bin/git fetch --tags\""
  status,stdout,stderr = systemu(commandline, :cwd => rdir, :chomp => true)
  if status != 0
    status_message = "problem: " + stderr
  else
    status_message = "fetched change: #{mess.subj}"
  end
  return status_message
end

def git_branch(rdir,user,target,branch,repo)
  if !File.exists?(target)
    guserinfo = Etc.getpwnam(user)
    FileUtils.mkdir_p(target)
    File.chown(guserinfo.uid,guserinfo.gid,target)
  end
  commandline = "/bin/su - #{user} -c \"cd #{rdir} && /usr/bin/git --work-tree=#{target} checkout -f origin/#{branch}\""
  status,stdout,stderr = systemu(commandline, :cwd => rdir, :chomp => true)
  if status != 0
    status_message = "problem: " + stderr
  else
    status_message = "checked out: [#{repo}] #{branch} to #{target}"
  end
  return status_message
end

def git_puppetmaster(rdir,user,smsg,target,separator)
  pdir = target.to_s + separator + smsg.branch

  if smsg.commit_id =~ /0000000000000000000000000000000000000000/
    # forcefully remove the branch
    commandline = "/bin/su - #{user} -c \"/bin/rm -fr #{pdir}\""
    status,stdout,stderr = systemu(commandline, :chomp => true)
    if status != 0
      status_message = "problem removing branch: " + stderr
    else
      status_message = "removed branch #{pdir} "
    end
  else
    if !File.exists?(pdir)
      guserinfo = Etc.getpwnam(user)
      FileUtils.mkdir_p(pdir)
      File.chown(guserinfo.uid,guserinfo.gid,pdir)
    end
    commandline = "/bin/su - #{user} -c \"cd #{rdir} && /usr/bin/git --work-tree=#{pdir} checkout -f origin/#{smsg.branch}\""
    status,stdout,stderr = systemu(commandline, :cwd => rdir, :chomp => true)
    if status != 0
      status_message = "problem: " + stderr
    else
      status_message = "checked out #{smsg.branch} to #{target} as #{pdir}."
    end
  end

  return status_message
end

def logmessage(message,sclient,topic,debug)

  $log.info(message)

  host_name = Socket::gethostname
  smessage = host_name + " " + message
  begin
    sclient.publish("/topic/#{topic}",smessage, {:subject => "Talking to eventbot"})
  rescue Exception => e
    emessage = "Exception: #{e}"
    $log.error(emessage)
    puts emessage if debug
  end
  puts message if debug
end

def dumpmessage(message)
  puts "Subject: #{message.headers["subject"]}"
  puts "Message-ID: #{message.headers["message-id"]}"
  puts "--"
  puts message.body
  puts "--"
end

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: stomp-git.rb [options]"

  options[:debug] = false
  opts.on( '-d', '--debug', 'Much output, do not detach' ) do
    options[:debug] = true
  end

  options[:configfile] = "/etc/stomp-git/stomp-git.yaml"
  opts.on( '-c', '--config FILE', 'Config is FILE' ) do|file|
    options[:configfile] = file
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
        exit
  end
end

optparse.parse!

yconfig = YAML.load_file(options[:configfile])
sdebug = options[:debug]

puts YAML.dump(yconfig) if sdebug

$log = Logger.new(yconfig['log-file'])
$log.level = Logger::INFO

if !options[:debug]
  $stderr = Logwrite.new($log, "stderr")
  $stdout = Logwrite.new($log, "stdout")
  pid = Process.fork
else
  pid = nil
  puts "DEBUG"
  puts "VERSION #{version}"
  puts "CONFIGFILE: #{options[:configfile]}"
end

if pid.nil?
  Signal.trap("TERM") do
    $log.info("Terminating.")
      exit
    end

  Signal.trap("HUP") do
    yconfig = YAML.load_file(options[:configfile])
    $log.info("Re-read #{options[:configfile]}")
  end

  listen_topic = yconfig['listen-topic']
  report_topic = yconfig['report-topic']
  repos = yconfig['repo-list']

  stompconnector = yconfig['stompconnector']
  stompconnector[:logger] = EventLogger.new

  client = Stomp::Client.new(stompconnector)

  if client
    logmessage("V. #{version} connected to #{listen_topic}",client,report_topic,sdebug)

    client.subscribe "/topic/#{listen_topic}" do |message|
      if message.body == "\n"
        puts "Bodge-beat frame" if sdebug
      else
        dumpmessage(message) if sdebug

        msg = Parsemessage.new(message)
        
        begin
          check_valid_repo(msg.repo,repos)
    
          repo_dir  = repos[msg.repo]['repo']
          repo_user = repos[msg.repo]['user']
          repo_mode = repos[msg.repo]['mode']

          check_valid_user(repo_user)

          status = gitfetch(msg,repo_dir,repo_user)
          logmessage(status,client,report_topic,sdebug)

          case repo_mode
          when "branch"
            if msg.branch == repos[msg.repo]['branch']
              status = git_branch(repo_dir,repo_user,repos[msg.repo]['target'],repos[msg.repo]['branch'],msg.repo) # origin/$branch
              logmessage(status,client,report_topic,sdebug)
            else
              logmessage("Not our branch: #{branch}",client,report_topic,sdebug) if sdebug
            end
          when "trusting"
            status = git_branch(repo_dir,repo_user,repos[msg.repo]['target'],'master',msg.repo) # origin/master
            logmessage(status,client,report_topic,sdebug)
          when "puppetmaster"
            status = git_puppetmaster(repo_dir,repo_user,msg,repos[msg.repo]['target'],"/")
            logmessage(status,client,report_topic,sdebug)
          when "atomic"
            status = git_puppetmaster(repo_dir,repo_user,msg,repos[msg.repo]['target'],"_")
            logmessage(status,client,report_topic,sdebug)
          when "normal"
            # Do nothing.
          else
            logmessage("Not a valid repo mode: #{repo_mode}",client,report_topic,sdebug)
          end
        rescue ArgumentError => e
          logmessage("User #{user} doesn't exist.",client,report_topic,sdebug)
        rescue UserLoginException => e
          logmessage(e.message,client,report_topic,sdebug)
        rescue MissingRepoException => e
          logmessage(e.message,client,report_topic,sdebug)
        rescue NotOurRepoException => e
          logmessage(e.message,client,report_topic,sdebug) if sdebug
        end
      end
    end
    client.join
    client.close
  else
    $log.error("Cannot subscribe to #{listen_topic}. Baling.")
  end

else
  begin
    File.open(pidfile, 'w') {|f| f.write(pid) }
  rescue Errno::EACCES
    $log.error("Cannot create PID file. Check the permissions and try again.")
    pid = nil
    exit
  end
  Process.detach(pid)
end
