#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'optparse'
require 'logger'

# You probably don't have the future-stomp gem..
require 'future-stomp'
#require_relative 'lib/future-stomp'

options = {}
version = '3.20'
pidfile = '/var/run/stomp-git.pid'

optparse = OptionParser.new do|opts|
  opts.banner = 'Usage: stomp-git.rb [options]'

  options[:debug] = false
  opts.on('-d', '--debug', 'Much output, do not detach') do
    options[:debug] = true
  end

  options[:configfile] = '/etc/stomp-git/stomp-git.yaml'
  opts.on('-c', '--config FILE', 'Config is FILE') do|file|
    options[:configfile] = file
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

yconfig = YAML.load_file(options[:configfile])
sdebug = options[:debug]

puts YAML.dump(yconfig) if sdebug

slog = GLog.new(options[:configfile],sdebug)

if !options[:debug]
  pid = Process.fork
else
  pid = nil
  puts 'DEBUG'
  puts "VERSION #{version}"
  puts "CONFIGFILE: #{options[:configfile]}"
end

if pid.nil?
  Signal.trap('TERM') do
    slog.msg('Terminating.')
    exit
  end

  Signal.trap('HUP') do
    yconfig = YAML.load_file(options[:configfile])
    slog.msg("Re-read #{options[:configfile]}")
  end

  listen_topic = yconfig['listen-topic']
  repos = yconfig['repo-list']

  stompconnector = yconfig['stompconnector']
  stompconnector[:logger] = slog

  client = Stomp::Client.new(stompconnector)

  if client
    slog.hash('start',{'version' => version, 'topic' => listen_topic})

    client.subscribe "/topic/#{listen_topic}" do |message|
      dumpmessage(message) if sdebug

      msg = Parsemessage.new(message)

      begin
        check_valid_repo(msg.repo,repos)

        repo_dir  = repos[msg.repo]['repo']
        repo_user = repos[msg.repo]['user']
        repo_mode = repos[msg.repo]['mode']

        check_valid_user(repo_user)

        status = gitfetch(msg,repo_dir,repo_user)
        slog.hash('fetch',status)

        case repo_mode
        when 'branch'
          if msg.branch == repos[msg.repo]['branch']
            status = git_branch(msg,repo_dir,repo_user,repos[msg.repo]['target'],repos[msg.repo]['branch']) # origin/$branch
            slog.hash('branch',status)
          else
            slog.hash('error',{'error' => 'Not our branch','branch' => branch}) if sdebug
          end
        when 'trusting'
          status = git_branch(msg,repo_dir,repo_user,repos[msg.repo]['target'],'master') # origin/master
          slog.hash('trusting',status)
        when 'puppetmaster'
          status = git_puppetmaster(repo_dir,repo_user,msg,repos[msg.repo]['target'],'/')
          slog.hash('puppetmaster',status)
        when 'tags'
          status = git_tags(repo_dir,repo_user,msg,repos[msg.repo]['target'],'/')
          slog.hash('tags',status)
        when 'atomic'
          status = git_puppetmaster(repo_dir,repo_user,msg,repos[msg.repo]['target'],'_')
          slog.hash('atomic',status)
        when 'normal'
          # Do nothing.
        else
          slog.hash('error',{'error '=> 'Not a valid repo mode','mode' => repo_mode})
        end
      rescue ArgumentError
        slog.hash('error',{'error' => 'User doesn\'t exist','user' => repo_user})
      rescue UserLoginException
        slog.hash('error',{'error' => 'User has no login shell','user' => repo_user})
      rescue MissingRepoException
        slog.hash('error',{'error' => 'Repo in config but not in filesystem','repo' => msg.repo})
      rescue NotOurRepoException
        slog.hash('error',{'error' => 'Not our repo','repo' => msg.repo}) if sdebug
      end
    end
    client.join
    client.close
  else
    slog.hash('error',{'error' => 'Cannot subscribe to topic','topic' => listen_topic})
  end

else
  begin
    File.open(pidfile, 'w') {|f| f.write(pid) }
  rescue Errno::EACCES
    slog.hash('error',{'error' => 'Cannot create PID file. Check the permissions and try again.'})
    pid = nil
    exit
  end
  Process.detach(pid)
end
